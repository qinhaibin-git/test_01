单例写法推荐：
1.双重检查（多线程下安全，保证只实例化一次）
public class Singleton{
   private static volatile Singleton singleton;
   private Singleton(){}
   
  public static Singleton getInstance(){
   if(singleton == null){
  synchronized (Singleton.class){
  if(singleton == null){
   singleton = new Singleton();
}
}
}
return singleton;
}
}

2.静态内部类
public class Singleton{
  private Singleton(){}
  private static class SingletonInstance{
  private static final Singleton INSTANCE = new Singleton();
}

 public static Singleton getInstance(){
  return SingletonInstance.INSTANCE;
}
}



public class Singleton{
  private Singleton(){}
 private static class SingletonInstance{
  private static final Singleton INSTANCE = new Singleton();
}
 public static Singleton getInstance(){
 return INSTANCE;
}

}



